# Main Nginx configuration file

events {
    worker_connections 1024;  # Defines the maximum number of connections each worker process can handle
}

http {
    # Resolver configuration for Docker's internal DNS
    resolver 127.0.0.11 valid=30s;  # Docker's embedded DNS server

    # Upstream configuration for the app_cluster
    upstream app_cluster {
        zone app_cluster_zone 64k;    # Shared memory zone for caching
        server app:8080;              # Reference to the 'app' service
        keepalive 32;                  # Number of idle keepalive connections to upstream servers
    }

    # Upstream configuration for Prometheus
    upstream prometheus_upstream {
        server prometheus:9090;        # Prometheus server
    }

    # Upstream configuration for Grafana
    upstream grafana_upstream {
        server grafana:3000;           # Grafana server
    }

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=30r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Server block for api.local.ritualworks.com (HTTP to HTTPS Redirect)
    server {
        listen 80;
        server_name api.local.ritualworks.com;
        return 301 https://$host$request_uri;
    }

    # Server block for api.local.ritualworks.com (HTTPS)
    server {
        listen 443 ssl http2;
        server_name api.local.ritualworks.com;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/local.ritualworks.com.crt;
        ssl_certificate_key /etc/nginx/ssl/local.ritualworks.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:...';  # Replace '...' with your cipher list
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;

        # Security Headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; object-src 'none';" always;

        # Main Location Block
        location / {
            proxy_pass http://app_cluster;               # Proxy to the app_cluster upstream
            proxy_http_version 1.1;
            proxy_set_header Host $host;                 # Preserve the original Host header
            proxy_set_header X-Real-IP $remote_addr;     # Pass the real client IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Preserve the forwarded IPs
            proxy_set_header X-Forwarded-Proto $scheme;  # Preserve the original protocol (http/https)

            # WebSocket Support (if applicable)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # CORS Configuration
            add_header 'Access-Control-Allow-Origin' 'http://localhost:3001' always;  # Adjust as needed
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;  # Allow credentials

            # Handle Preflight Requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            # Rate Limiting and Connection Limiting
            limit_req zone=req_limit_per_ip burst=20 nodelay;
            limit_conn conn_limit_per_ip 1000;
        }
    }

    # Server block for prometheus.local.ritualworks.com (HTTP to HTTPS Redirect)
    server {
        listen 80;
        server_name prometheus.local.ritualworks.com;
        return 301 https://$host$request_uri;
    }

    # Server block for prometheus.local.ritualworks.com (HTTPS)
    server {
        listen 443 ssl http2;
        server_name prometheus.local.ritualworks.com;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/local.ritualworks.com.crt;
        ssl_certificate_key /etc/nginx/ssl/local.ritualworks.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:...';  # Replace '...' with your cipher list
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;

        # Security Headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; object-src 'none';" always;

        # Main Location Block
        location / {
            proxy_pass http://prometheus_upstream;         # Proxy to the Prometheus upstream
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Rate Limiting and Connection Limiting
            limit_req zone=req_limit_per_ip burst=20 nodelay;
            limit_conn conn_limit_per_ip 1000;
        }
    }

    # Server block for grafana.local.ritualworks.com (HTTP to HTTPS Redirect)
    server {
        listen 80;
        server_name grafana.local.ritualworks.com;
        return 301 https://$host$request_uri;
    }

    # Server block for grafana.local.ritualworks.com (HTTPS)
    server {
        listen 443 ssl http2;
        server_name grafana.local.ritualworks.com;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/local.ritualworks.com.crt;
        ssl_certificate_key /etc/nginx/ssl/local.ritualworks.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:...';  # Replace '...' with your cipher list
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;

        # Security Headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; object-src 'none';" always;

        # Main Location Block
        location / {
            proxy_pass http://grafana_upstream;            # Proxy to the Grafana upstream
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Rate Limiting and Connection Limiting
            limit_req zone=req_limit_per_ip burst=20 nodelay;
            limit_conn conn_limit_per_ip 1000;
        }
    }

    # Server block for localhost (HTTP to HTTPS Redirect)
    server {
        listen 80;
        server_name localhost;
        return 301 https://$host$request_uri;
    }

    # Server block for localhost (HTTPS)
    server {
        listen 443 ssl http2;
        server_name localhost;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/local.ritualworks.com.crt;
        ssl_certificate_key /etc/nginx/ssl/local.ritualworks.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:...';  # Replace '...' with your cipher list
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;

        # Security Headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; object-src 'none';" always;

        # Location Blocks for Specific Endpoints
        location /api {
            proxy_pass http://app_cluster;                 # Proxy to the app_cluster upstream
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Rate Limiting and Connection Limiting
            limit_req zone=req_limit_per_ip burst=20 nodelay;
            limit_conn conn_limit_per_ip 1000;
        }

        location /prometheus {
            proxy_pass http://prometheus_upstream;         # Proxy to the Prometheus server
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Rate Limiting and Connection Limiting
            limit_req zone=req_limit_per_ip burst=20 nodelay;
            limit_conn conn_limit_per_ip 1000;
        }

        location /grafana {
            proxy_pass http://grafana_upstream;            # Proxy to the Grafana server
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Rate Limiting and Connection Limiting
            limit_req zone=req_limit_per_ip burst=20 nodelay;
            limit_conn conn_limit_per_ip 1000;
        }
    }
}
