using System;
using System.IO;
using System.Threading.Tasks;
using Amazon.S3;
using Amazon.S3.Model;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using MassTransit;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

public class UserRegistrationConsumer : IConsumer<UserRegisteredEvent>
{
    private readonly ILogger<UserRegistrationConsumer> _logger;
    private readonly BlobServiceClient _blobServiceClient;
    private readonly IAmazonS3 _s3Client;
    private readonly string _s3BucketName;
    private readonly string _localDirectory;

    public UserRegistrationConsumer(ILogger<UserRegistrationConsumer> logger, 
        BlobServiceClient blobServiceClient, 
        IAmazonS3 s3Client, 
        IConfiguration configuration)
    {
        _logger = logger;
        _blobServiceClient = blobServiceClient;
        _s3Client = s3Client;
        _s3BucketName = configuration["AWS:BucketName"];
        _localDirectory = configuration["LocalFileStorage:Directory"];
    }

    public async Task Consume(ConsumeContext<UserRegisteredEvent> context)
    {
        var username = context.Message.Username;
        _logger.LogInformation($"Creating folders for user: {username}");

        // Ensure the container exists
        var containerClient = _blobServiceClient.GetBlobContainerClient("user-data");
        await CreateContainerIfNotExistsAsync(containerClient);

        // Create folders in Azure Blob Storage
        await CreateBlobDirectory(containerClient, username, "products/assets/");
        await CreateBlobDirectory(containerClient, username, "products/images/");

        // Create folders in S3
        await CreateS3Directory(username, "products/assets/");
        await CreateS3Directory(username, "products/images/");

        // Create folders in local upload volume
        CreateLocalDirectory(username, "products/assets/");
        CreateLocalDirectory(username, "products/images/");

        _logger.LogInformation($"Folders created successfully for user: {username}");
    }

    private async Task CreateContainerIfNotExistsAsync(BlobContainerClient containerClient)
    {
        try
        {
            await containerClient.CreateIfNotExistsAsync(PublicAccessType.None);
            _logger.LogInformation($"Container '{containerClient.Name}' ensured to exist.");
        }
        catch (Exception ex)
        {
            _logger.LogError($"Error ensuring container '{containerClient.Name}' exists: {ex.Message}");
            throw;
        }
    }

    private async Task CreateBlobDirectory(BlobContainerClient containerClient, string username, string path)
    {
        // In Azure Blob Storage, creating a directory is just creating an empty blob with a directory path
        var directoryClient = containerClient.GetBlobClient($"{username}/{path}");
        await directoryClient.UploadAsync(new MemoryStream());
    }

    private async Task CreateS3Directory(string username, string path)
    {
        // In S3, creating a directory is just creating an empty object with a directory path
        var putRequest = new PutObjectRequest
        {
            BucketName = _s3BucketName,
            Key = $"{username}/{path}",
            ContentBody = string.Empty
        };
        await _s3Client.PutObjectAsync(putRequest);
    }

    private void CreateLocalDirectory(string username, string path)
    {
        // For local storage, create the directory structure on the file system
        var localPath = Path.Combine(_localDirectory, username, path);
        if (!Directory.Exists(localPath))
        {
            Directory.CreateDirectory(localPath);
        }
    }
}
