# Full rigorous and careful solution for Vault integration with Kubernetes
# Including all relevant files and configuration.

---
# Helm Chart Values File for Vault (vault-values.yaml)
# Configures Vault in HA mode with the Injector enabled
server:
  ha:
    enabled: true
    replicas: 3
  dataStorage:
    enabled: true
    storageClass: standard  # Adjust based on your cloud provider
  auditStorage:
    enabled: true
    storageClass: standard
  extraEnvironmentVars:
    VAULT_LOG_LEVEL: "debug"

injector:
  enabled: true
  resources:
    limits:
      memory: "128Mi"
      cpu: "100m"
    requests:
      memory: "64Mi"
      cpu: "50m"

---
# Terraform Configuration for Vault Setup (vault-setup.tf)

provider "vault" {
  address = "https://vault.default.svc.cluster.local:8200"
  token   = var.vault_root_token
}

resource "vault_auth_backend" "kubernetes" {
  type = "kubernetes"
}

resource "vault_kubernetes_auth_backend_config" "k8s_auth" {
  kubernetes_host = var.kubernetes_host
  kubernetes_ca_cert = file("${var.kubernetes_ca_cert_path}")
  token_reviewer_jwt = file("${var.token_reviewer_jwt_path}")
  issuer = "https://kubernetes.default.svc.cluster.local"
}

resource "vault_policy" "db_read_policy" {
  name   = "db-read-policy"
  policy = <<EOT
path "database/creds/db-role" {
  capabilities = ["read"]
}
EOT
}

resource "vault_database_secret_backend_connection" "postgres" {
  name         = "postgres"
  plugin_name  = "postgresql-database-plugin"
  allowed_roles = ["db-role"]
  connection_url = "postgresql://{{username}}:{{password}}@postgres-primary.default.svc.cluster.local:5432/postgres"
  username     = "postgres"
  password     = var.postgres_password
}

resource "vault_database_secret_backend_role" "db_role" {
  name          = "db-role"
  db_name       = "postgres"
  creation_statements = [
    "CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';",
    "GRANT CONNECT ON DATABASE postgres TO \"{{name}}\";"
  ]
  default_ttl   = "1h"
  max_ttl       = "24h"
}

---
# Vault Init Script (vault-init-job.yaml)

apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init
spec:
  template:
    spec:
      serviceAccountName: vault
      containers:
      - name: vault-init
        image: hashicorp/vault:latest
        env:
        - name: VAULT_ADDR
          value: "https://vault.default.svc.cluster.local:8200"
        command:
        - /bin/sh
        - -c
        - |
          if ! vault status | grep -q "Initialized"; then
            vault operator init -key-shares=1 -key-threshold=1 -format=json > /vault/file/init-output.json
            vault operator unseal $(jq -r '.unseal_keys_b64[0]' /vault/file/init-output.json)
            vault login $(jq -r '.root_token' /vault/file/init-output.json)
            echo "Vault initialized and unsealed."
          else
            echo "Vault already initialized."
          fi
        volumeMounts:
        - name: vault-storage
          mountPath: /vault/file
      restartPolicy: OnFailure
      volumes:
      - name: vault-storage
        persistentVolumeClaim:
          claimName: vault-pvc
---
# Vault Agent Injector Example Configuration (vault-agent-injector.yaml)

apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "db-role"
        vault.hashicorp.com/agent-inject-secret-db-creds: "database/creds/db-role"
    spec:
      containers:
      - name: app
        image: my-app:latest
        env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: vault-secrets
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vault-secrets
              key: password

---
# CI/CD Pipeline Example (GitHub Actions)

name: Deploy to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Kubernetes
      uses: azure/setup-kubectl@v1
      with:
        version: "v1.23.5"

    - name: Deploy Vault
      run: |
        helm repo add hashicorp https://helm.releases.hashicorp.com
        helm install vault hashicorp/vault --values ./vault-values.yaml

    - name: Apply Kubernetes Manifests
      run: |
        kubectl apply -f vault-init-job.yaml
        kubectl apply -f vault-agent-injector.yaml

    - name: Terraform Init and Apply
      run: |
        terraform init
        terraform apply -auto-approve
