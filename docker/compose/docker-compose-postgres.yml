version: '3.8'

services:
  postgres_primary:
    image: bitnami/postgresql-repmgr:latest
    user: "1001"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - REPMGR_PRIMARY_ROLE=true
      - REPMGR_NODE_ID=1
      - REPMGR_NODE_NAME=postgres-primary-1
      - REPMGR_NODE_NETWORK_NAME=postgres_primary
      - REPMGR_PARTNER_NODES=postgres-primary-1,postgres-standby-2
      - REPMGR_PRIMARY_HOST=postgres_primary
      - REPMGR_USER=repmgr
      - REPMGR_PASSWORD=repmgrpass
      - VAULT_ADDR=http://vault:8200
    ports:
      - "5432:5432"
    volumes:
      - ../../data/postgres-primary-data:/bitnami/postgresql
      - ../../scripts:/scripts
      - ../../postgres_logs:/opt/bitnami/postgresql/logs
      - certs-volume:/certs-volume:rw
      - ../../config:/etc/pgbackrest  # pgBackRest config from host's ../../config
      - pgbackrest-data:/var/lib/pgbackrest  # Backup data storage
    networks:
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["/bin/bash", "-c", "/scripts/init_pg_primary.sh primary"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  postgres_standby:
    image: bitnami/postgresql-repmgr:latest
    user: "1001"
    depends_on:
      - postgres_primary  # Ensure primary runs before standby
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - REPMGR_PRIMARY_ROLE=false
      - REPMGR_NODE_ID=2
      - REPMGR_NODE_NAME=postgres-standby-2
      - REPMGR_NODE_NETWORK_NAME=postgres_standby
      - REPMGR_PARTNER_NODES=postgres-primary-1,postgres-standby-2
      - REPMGR_PRIMARY_HOST=postgres_primary
      - REPMGR_USER=repmgr
      - REPMGR_PASSWORD=repmgrpass
    ports:
      - "5434:5432"
    volumes:
      - ../../data/postgres-standby-data:/bitnami/postgresql
      - ../../scripts:/scripts
      - ../../postgres_logs:/opt/bitnami/postgresql/logs 
      - certs-volume:/certs-volume
      - ../../config:/etc/pgbackrest  # pgBackRest config from host's ../../config
      - pgbackrest-data:/var/lib/pgbackrest  # Backup data storage
    networks:
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["/bin/bash", "-c", "/scripts/init_pg_standby.sh standby"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  pgbackrest:
    build:
      context: ../
      dockerfile: Dockerfile.pgbackrest  # Use the custom Dockerfile
    depends_on:
      - postgres_primary
    volumes:
      - ../../config:/etc/pgbackrest  # pgBackRest config from host's ../../config
      - pgbackrest-data:/var/lib/pgbackrest  # Backup data storage
      - ../../data/postgres-primary-data:/bitnami/postgresql
      - ../../backups:/backups  # Local directory to store the backups
      - ../../scripts:/scripts  # Scripts directory for backup and restore
    networks:
      - internal_network
    entrypoint: ["/bin/bash", "-c", "/scripts/pgbackrest_backup.sh"]

networks:
  internal_network:
    name: internal_network
    external: true
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres-primary-data:  # Named volume for primary data
  postgres-standby-data:  # Named volume for standby data
  certs-volume:
    external: true
  pgbackrest-data:  # Backup data volume for pgBackRest
