version: '3.8'

services:
  # vault-agent:
  #   build:
  #     context: ../
  #     dockerfile: Dockerfile.vault
  #   environment:
  #     VAULT_ADDR: https://vault:8200
  #     VAULT_SKIP_VERIFY: TRUE
  #   volumes:
  #     - vault-secrets:/vault/secrets
  #     - ../../vault/config:/vault/config
  #     - ../../vault/scripts:/vault/scripts
  #     - certs-volume:/vault/certs
  #     - pgpool-config:/etc/pgpool-II
  #   networks:
  #     - internal_network
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #       delay: 10s
  #       max_attempts: 3
  #       window: 120s
  #   privileged: true
  #   command: sh -c "vault agent -log-level=debug -config=/vault/config/vault-agent-config.hcl"

  # --- Redis services (commented out) ---
  # redis_exporter:
  #   image: oliver006/redis_exporter:latest
  #   container_name: redis_exporter
  #   ports:
  #     - "9121:9121"
  #
  # redis-master:
  #   container_name: redis-master
  #   image: redis:latest
  #   command: ["redis-server", "/etc/redis/redis.conf", "--appendonly", "yes"]
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-master-data:/data
  #     - ../../redis/config/redis.conf:/etc/redis/redis.conf
  #     - certs-volume:/certs-volume:ro
  #   networks:
  #     - internal_network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "--tls", "--cert", "/certs-volume/redis.crt", "--key", "/certs-volume/redis.key", "--cacert", "/certs-volume/ca.crt", "-h", "127.0.0.1", "-p", "6379", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #       delay: 10s
  #       max_attempts: 3
  #       window: 120s

  # --- RabbitMQ services (commented out) ---
  # rabbitmq_exporter:
  #   image: kbudde/rabbitmq-exporter
  #   container_name: rabbitmq_exporter
  #   ports:
  #     - "9419:9419"
  #
  # rabbitmq-node1:
  #   image: rabbitmq:3-management
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #     - "5671:5671"
  #   hostname: rabbitmq-node1
  #   networks:
  #     internal_network:
  #       aliases:
  #         - rabbitmq-node1
  #   volumes:
  #     - rabbitmq-data-node1:/var/lib/rabbitmq
  #     - certs-volume:/etc/ssl/certs:ro
  #     - ../../rabbit/config/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie:ro
  #     - ../../rabbit/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
  #   healthcheck:
  #     test: ["CMD-SHELL", "rabbitmqctl --erlang-cookie $(cat /var/lib/rabbitmq/.erlang.cookie) status"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   command: >
  #     /bin/bash -c "
  #     rabbitmq-server;
  #     while ! rabbitmqctl wait /var/lib/rabbitmq/mnesia/rabbit@rabbitmq-node1.pid --timeout 60; do
  #       echo 'Waiting for RabbitMQ server to start...';
  #       sleep 1;
  #     done;
  #     echo 'RabbitMQ server started.';
  #
  #     rabbitmqctl add_user rabbit_user ${RABBITMQ_DEFAULT_PASS};
  #     rabbitmqctl set_user_tags rabbit_user administrator;
  #     rabbitmqctl set_permissions -p / rabbit_user '.*' '.*' '.*';
  #     rabbitmqctl set_policy ha-all '.*' '{\"ha-mode\":\"all\"}' --apply-to queues;
  #     "

  # --- MinIO (Ninio) service (commented out) ---
  # minio1:
  #   image: minio/minio:latest
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     - MINIO_ROOT_USER=test
  #     - MINIO_ROOT_PASSWORD=tester123
  #     - MINIO_SERVER_CERT=/certs-volume/public.crt
  #     - MINIO_SERVER_KEY=/certs-volume/private.key
  #     - MINIO_SITE_REGION=us-east-1
  #     - MINIO_CLUSTER_NAME=ritualworks-minio
  #   volumes:
  #     - minio-data1:/data
  #     - certs-volume:/certs-volume:ro
  #   networks:
  #     internal_network:
  #       aliases:
  #         - minio1
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f https://localhost:9000/minio/health/ready || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   entrypoint: /bin/sh
  #   command: >
  #     -c "
  #     minio server /data --certs-dir /certs-volume &
  #
  #     echo 'Waiting for MinIO to be ready...' &&
  #     until curl -s https://localhost:9000/minio/health/ready >/dev/null; do
  #       sleep 5;
  #     done &&
  #     echo 'Configuring MinIO for buckets and policies...' &&
  #
  #     mc alias set local https://localhost:9000 test tester123 --insecure &&
  #
  #     mc mb local/public-images --insecure --ignore-existing &&
  #     mc mb local/private-assets --insecure --ignore-existing &&
  #
  #     echo '{
  #       \"Version\": \"2012-10-17\",
  #       \"Statement\": [
  #         {
  #           \"Effect\": \"Allow\",
  #           \"Action\": [
  #             \"s3:ListBucket\",
  #             \"s3:PutObject\",
  #             \"s3:GetObject\",
  #             \"s3:DeleteObject\"
  #           ],
  #           \"Resource\": [
  #             \"arn:aws:s3:::*\"
  #           ]
  #         }
  #       ]
  #     }' > /tmp/readwrite-policy.json &&
  #     mc admin policy create local readwrite /tmp/readwrite-policy.json --insecure &&
  #
  #     echo '{
  #       \"Version\": \"2012-10-17\",
  #       \"Statement\": [
  #         {
  #           \"Effect\": \"Allow\",
  #           \"Principal\": \"*\",
  #           \"Action\": [\"s3:GetObject\"],
  #           \"Resource\": [\"arn:aws:s3:::public-images/*\"]
  #         }
  #       ]
  #     }' > /tmp/public-images-policy.json &&
  #     mc anonymous set-json /tmp/public-images-policy.json local/public-images --insecure &&
  #
  #     echo 'MinIO configuration completed.'
  #     "

networks:
  internal_network:
    name: internal_network
    external: true

volumes:
  redis-master-data:
    driver: local
  es-data-node1:
    driver: local
  es-backup:
    driver: local
  rabbitmq-data-node1:
    driver: local
  minio-data1:
    driver: local
  certs-volume:
    external: true
  vault-secrets:
    external: true
  vault-sink:
    external: true
  pgpool-config:
    external: true
