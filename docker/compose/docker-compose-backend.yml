version: '3.8'

services:
  vault-agent:
    image: hashicorp/vault:latest
    user: "${UID}:${GID}"
    environment:
      VAULT_ADDR: http://vault:8200
    volumes:
      - ../../vault/data:/vault/data
      - ../../vault/secrets:/vault/secrets
      - ../../vault/config:/vault/config
      - ../../scripts:/vault/scripts
    networks:
      - internal_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    privileged: true
    command: sh -c "vault agent -config=/vault/config/vault-agent-config.hcl"

  haproxy:
    user: "${UID}:${GID}"
    build:
      context: ../..
      dockerfile: docker/Dockerfile.haproxy
    volumes:
      - ../../haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - certs-volume:/certs-volume:ro  
    ports:
      - "5433:5432"
      - "8404:8404"
    env_file:
      - .env
    networks:
      - internal_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  redis-master:
    image: redis:latest
    command: ["redis-server", "/etc/redis/redis.conf", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis-master-data:/data
      - ../../config/redis-master.conf:/etc/redis/redis.conf
      - certs-volume:/certs-volume:ro
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "redis-cli", "--tls", "--cert", "/certs-volume/redis.crt", "--key", "/certs-volume/redis.key", "--cacert", "/certs-volume/ca.crt", "-h", "127.0.0.1", "-p", "6379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  redis-replica:
    image: redis:latest
    command: ["redis-server", "/etc/redis/redis.conf", "--replicaof", "redis-master", "6379"]
    ports:
      - "6380:6379"
    volumes:
      - redis-replica-data:/data
      - ../../config/redis-replica.conf:/etc/redis/redis.conf
      - certs-volume:/certs-volume:ro
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "redis-cli", "--tls", "--cert", "/certs-volume/redis.crt", "--key", "/certs-volume/redis.key", "--cacert", "/certs-volume/ca.crt", "-h", "127.0.0.1", "-p", "6379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  es-node-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
    environment:
      - NODE_NAME=es-node-1
      - ELASTIC_PASSWORD=your_elastic_password
      - ES_JAVA_OPTS=-Djava.security.policy=/usr/share/elasticsearch/config/my-security.policy
    volumes:
      - es-data-node1:/usr/share/elasticsearch/data
      - es-backup:/usr/share/elasticsearch/backup
      - ../../config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ../../config/my-security.policy:/usr/share/elasticsearch/config/my-security.policy
      - certs-volume:/certs-volume:rw
      - ../../scripts/es-entrypoint.sh:/usr/share/elasticsearch/config/es-entrypoint.sh:ro
      - ../../config/log4j2.properties:/usr/share/elasticsearch/config/log4j2.properties
      - ../../config/jvm.options:/usr/share/elasticsearch/config/jvm.options
      - ../../elasticsearch/logs:/usr/share/elasticsearch/logs
      - ../../elasticsearch/heapdumps:/var/lib/elasticsearch/heapdumps
    entrypoint: ["/usr/share/elasticsearch/config/es-entrypoint.sh"]
    networks:
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  es-node-2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
    environment:
      - NODE_NAME=es-node-2
      - ELASTIC_PASSWORD=your_elastic_password
      - ES_JAVA_OPTS=-Djava.security.policy=/usr/share/elasticsearch/config/my-security.policy
    volumes:
      - es-data-node2:/usr/share/elasticsearch/data
      - es-backup:/usr/share/elasticsearch/backup
      - ../../config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ../../config/my-security.policy:/usr/share/elasticsearch/config/my-security.policy
      - certs-volume:/certs-volume:rw
      - ../../scripts/es-entrypoint.sh:/usr/share/elasticsearch/config/es-entrypoint.sh:ro
      - ../../config/log4j2.properties:/usr/share/elasticsearch/config/log4j2.properties
      - ../../config/jvm.options:/usr/share/elasticsearch/config/jvm.options
      - ../../elasticsearch/logs:/usr/share/elasticsearch/logs
      - ../../elasticsearch/heapdumps:/var/lib/elasticsearch/heapdumps
    entrypoint: ["/usr/share/elasticsearch/config/es-entrypoint.sh"]
    networks:
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  rabbitmq-node1:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
      - "5671:5671"
    hostname: rabbitmq-node1
    networks:
      internal_network:
        aliases:
          - rabbitmq-node1
    volumes:
      - rabbitmq-data-node1:/var/lib/rabbitmq
      - certs-volume:/etc/ssl/certs:ro
      - ../../config/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie:ro
      - ../../config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro 
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl --erlang-cookie $(cat /var/lib/rabbitmq/.erlang.cookie) status"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      /bin/bash -c "
      rabbitmq-server;
      while ! rabbitmqctl wait /var/lib/rabbitmq/mnesia/rabbit@rabbitmq-node1.pid --timeout 60; do
        echo 'Waiting for RabbitMQ server to start...'
        sleep 1
      done;
      echo 'RabbitMQ server started.';
      
      rabbitmqctl add_user rabbit_user ${RABBITMQ_DEFAULT_PASS};
      rabbitmqctl set_user_tags rabbit_user administrator;
      rabbitmqctl set_permissions -p / rabbit_user '.*' '.*' '.*';
      rabbitmqctl set_policy ha-all '.*' '{\"ha-mode\":\"all\"}' --apply-to queues;
      "
    environment:
      - RABBITMQ_DEFAULT_USER=rabbit_user
      - RABBITMQ_DEFAULT_PASS=password
      - RABBITMQ_NODENAME=rabbit@rabbitmq-node1
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf 
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  rabbitmq-node2:
    image: rabbitmq:3-management
    ports:
      - "5673:5672"   # AMQP Port for node2 (host port 5673 mapped to container port 5672)
      - "15673:15672" 
      - "5674:5671"
    hostname: rabbitmq-node2
    depends_on:
      - rabbitmq-node1
    networks:
      internal_network:
        aliases:
          - rabbitmq-node2
    volumes:
      - rabbitmq-data-node2:/var/lib/rabbitmq
      - certs-volume:/etc/ssl/certs:ro
      - ../../config/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie:ro
      - ../../config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro 
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl --erlang-cookie $(cat /var/lib/rabbitmq/.erlang.cookie) status"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      /bin/bash -c "
      rabbitmq-server;
      while ! rabbitmqctl wait /var/lib/rabbitmq/mnesia/rabbit@rabbitmq-node2.pid --timeout 60; do
        echo 'Waiting for RabbitMQ server to start...'
        sleep 1
      done;
      echo 'RabbitMQ server started.';
      
      while ! rabbitmqctl -n rabbit@rabbitmq-node1 --erlang-cookie $(cat /var/lib/rabbitmq/.erlang.cookie) ping; do
        echo 'Waiting for rabbitmq-node1...'
        sleep 5
      done;

      echo 'rabbitmq-node1 is ready. Joining the cluster...';
      rabbitmqctl stop_app;
      rabbitmqctl reset;
      rabbitmqctl join_cluster rabbit@rabbitmq-node1;
      rabbitmqctl start_app;
      rabbitmqctl await_online_nodes 2 --timeout 60;
      "
    environment:
      - RABBITMQ_DEFAULT_USER=rabbit_user
      - RABBITMQ_DEFAULT_PASS=password
      - RABBITMQ_NODENAME=rabbit@rabbitmq-node2
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf 
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  minio1:
    image: minio/minio:latest
    ports:
      - "9000:9000"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_SERVER_CERT=/certs-volume/public.crt
      - MINIO_SERVER_KEY=/certs-volume/private.key
      - MINIO_SITE_REGION=us-east-1
      - MINIO_CLUSTER_NAME=ritualworks-minio
    volumes:
      - minio-data1:/data
      - certs-volume:/certs-volume:ro
    networks:
      internal_network:
        aliases:
          - minio1
          - minio1.ritualworks.com
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: server https://minio1.ritualworks.com/data https://minio2.ritualworks.com/data --certs-dir /certs-volume
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  minio2:
    image: minio/minio:latest
    ports:
      - "9001:9000"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_SERVER_CERT=/certs-volume/public.crt
      - MINIO_SERVER_KEY=/certs-volume/private.key
      - MINIO_SITE_REGION=us-east-1
      - MINIO_CLUSTER_NAME=ritualworks-minio
    volumes:
      - minio-data2:/data
      - certs-volume:/certs-volume:ro
    networks:
      internal_network:
        aliases:
          - minio2
          - minio2.ritualworks.com
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9001/minio/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: server https://minio1.ritualworks.com/data https://minio2.ritualworks.com/data --certs-dir /certs-volume
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

networks:
  internal_network:
    name: internal_network
    external: true

volumes:
  redis-master-data:
    driver: local
  redis-replica-data:
    driver: local
  es-data-node1:
    driver: local
  es-data-node2:
    driver: local
  es-backup:
    driver: local
  rabbitmq-data-node1:
    driver: local
  rabbitmq-data-node2:
    driver: local
  minio-data1:
    driver: local
  minio-data2:
    driver: local
  certs-volume:
    external: true
